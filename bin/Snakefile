#! /usr/bin/env bash
## Snakefile
####################
import glob
import re

BASE_DIR = workflow.basedir + "/../"
#suffix for single-end reads
SE = config["SE_SUFFIX"]
#suffix for paired-end reads
R1 = config["R1_SUFFIX"]
R2 = R1.replace("1","2")
#R2 = config["R2_SUFFIX"]
fastqs_p1 = glob.glob("fastq/*"+R1+"*")
# sort the fastqs in order the R1 and R2 files to match each othter. 
# fastqs_p1.sort()
#fastqs_p2 = glob.glob("fastq/*"+R2+"*")
#fastqs_p2.sort()
fastqs_p2 = [re.sub("(fastq/.+)"+ R1 +"(.*)$", "\\1"+ R2 +"\\2",a) for a in fastqs_p1]

fastqs_se = glob.glob("fastq/*"+SE+"*")
fastqs_se = [x for x in fastqs_se if x not in fastqs_p1 and x not in fastqs_p2 ]

SAMPLES_SE = [re.sub("fastq/(.+)"+ SE +".*$","\\1",a) for a in fastqs_se]
SAMPLES_PE = [re.sub("fastq/(.+)"+ R1 +".*$","\\1",a) for a in fastqs_p1]
#sorting causes problems.
#SAMPLES_PE.sort()
FASTQ_DICT = dict(zip(SAMPLES_SE,fastqs_se))
for idx in range(len(fastqs_p1)):
  FASTQ_DICT[SAMPLES_PE[idx]] = [fastqs_p1[idx],fastqs_p2[idx]]

SAMPLES = SAMPLES_SE + SAMPLES_PE

## annotation path
GENOME = config["GENOME"]
BOWTIE2_INDEX = config["BOWTIE2_INDEX_PATH"]+GENOME

# dependencies.
MARKDUP=BASE_DIR+"dependencies/picard.jar MarkDuplicates"

#print(SAMPLES)
#print(FASTQ_DICT)

rule all:
  input: 
    expand("bam/{sample}.nodup.bam",sample=SAMPLES),
    expand("bigWig/{sample}.nodup.bw",sample=SAMPLES)



rule bowtie2_align:
  output: 
    bam=temp("bam/{sample}.sorted.bam")
  input:
    lambda wildcards: FASTQ_DICT[wildcards.sample]
  threads: 10 
  run:
    print(input)
    if len(input) == 1:
      middle = "-U " + str(input)
    elif len(input) == 2:
      middle = "-1 " + str(input[0]) + " -2 " + str(input[1]) + " -X 2000"
    shell(
    "bowtie2 -x {BOWTIE2_INDEX} "
    "{middle} "
    "-p {threads} |"
    "samtools view -bS |"
    "samtools sort -@ {threads} -m 4G > {output.bam}"
    )

rule bam_rmdup:
  input:
    bam = "bam/{sample}.sorted.bam",
  output:
    bam = "bam/{sample}.nodup.bam",
    bai = "bam/{sample}.nodup.bam.bai",
    qc = "qc/{sample}.dup.qc"
  log:
    "logs/markdup/{sample}.markdup.log"
  threads: 3
  shell:
    "java -Xmx12G -XX:ParallelGCThreads=3 -jar {MARKDUP} TMP_DIR=tmp/{wildcards.sample} INPUT={input.bam} OUTPUT={output.bam} METRICS_FILE={output.qc} VALIDATION_STRINGENCY=LENIENT ASSUME_SORTED=true REMOVE_DUPLICATES=true 2> {log};"
    "samtools index {output.bam}"

rule bam2bigwig:
  input:
    bam = "bam/{sample}.nodup.bam"
  output: 
    bw = "bigWig/{sample}.nodup.bw"
  threads: 6
  shell:
    "bamCoverage -b {input.bam} -o {output.bw} --outFileFormat bigwig "
    "-bs 50 --numberOfProcessors {threads} --normalizeUsing RPKM"
